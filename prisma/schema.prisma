// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentStatus {
  DRAFT
  PUBLISHED
}

model Topic {
  id             String   @id @default(cuid())
  slug           String   @unique
  title          String
  locale         String
  tags           String[]
  thumbnailUrl   String?  // URL to topic thumbnail image
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  questions Question[]
  articles  Article[]
  faqItems  FAQItem[]

  @@index([slug])
  @@index([locale])
  @@index([tags])
  @@index([seoKeywords])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([locale, updatedAt])
}

model Question {
  id        String   @id @default(cuid())
  topicId   String
  text      String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([topicId, isPrimary])
}

model Article {
  id             String        @id @default(cuid())
  topicId        String        @unique
  content        String        @db.Text
  status         ContentStatus @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, status])
  @@index([seoKeywords])
}

model FAQItem {
  id        String   @id @default(cuid())
  topicId   String
  question  String
  answer    String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@index([topicId, order])
}

model IngestJob {
  id          String    @id @default(cuid())
  topicSlug   String
  status      String // "processing", "completed", "failed"
  payload     Json
  error       String?   @db.Text
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([topicSlug])
  @@index([status])
  @@index([createdAt])
}

// CMS Models

// Site-wide settings
model SiteSettings {
  id             String   @id @default(cuid())
  siteName       String   @default("Q&A Article FAQ")
  logoUrl        String?
  faviconUrl     String?
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  socialLinks    Json?    // {twitter, facebook, linkedin, etc.}
  customCss      String?  @db.Text
  customJs       String?  @db.Text
  updatedAt      DateTime @updatedAt
  updatedBy      String?
}

// Custom pages (About, Contact, etc.)
model Page {
  id             String        @id @default(cuid())
  slug           String        @unique
  title          String
  content        String        @db.Text
  status         ContentStatus @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String?
  updatedBy      String?

  @@index([slug])
  @@index([status])
  @@index([updatedAt])
  @@index([status, updatedAt])
}

// Navigation menu items
model MenuItem {
  id         String     @id @default(cuid())
  label      String
  url        String
  order      Int
  parentId   String?
  isExternal Boolean    @default(false)
  openNewTab Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  parent   MenuItem?  @relation("MenuHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children MenuItem[] @relation("MenuHierarchy")

  @@index([order])
  @@index([parentId])
}

// Footer configuration
model FooterColumn {
  id        String       @id @default(cuid())
  title     String
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  links FooterLink[]

  @@index([order])
}

model FooterLink {
  id        String       @id @default(cuid())
  columnId  String
  label     String
  url       String
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  column FooterColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([columnId, order])
}

model FooterSettings {
  id            String   @id @default(cuid())
  copyrightText String
  socialLinks   Json?    // {twitter, facebook, linkedin, etc.}
  updatedAt     DateTime @updatedAt
}

// Media library
model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int      // in bytes
  url          String
  thumbnailUrl String?
  uploadedBy   String?
  createdAt    DateTime @default(now())

  @@index([mimeType])
  @@index([createdAt])
  @@index([uploadedBy])
  @@index([mimeType, createdAt])
}

// User management with roles
enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String     // hashed
  name      String
  role      UserRole   @default(VIEWER)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  auditLogs AuditLog[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([role, isActive])
}

// Audit logging
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

model AuditLog {
  id         String      @id @default(cuid())
  userId     String
  action     AuditAction
  entityType String      // "Topic", "Page", "Settings", etc.
  entityId   String?
  details    Json?       // before/after values
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
  @@index([action])
  @@index([userId, createdAt])
  @@index([entityType, createdAt])
  @@index([action, createdAt])
}
